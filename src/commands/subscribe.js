const { Markup } = require('telegraf');
const { getSubscriptionPlans, getSubscriptionPlan, getUserSubscription, activateSubscription } = require('../services/api');
const { createPayment, processSuccessfulPayment, generateReceiptNumber, createTelegramInvoice } = require('../services/payment');
const { setupLogger } = require('../utils/logger');
const { query } = require('../services/database');
const crypto = require('crypto');

const logger = setupLogger();

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function subscribeCommand(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if (ctx.state.hasActiveSubscription) {
      return ctx.reply(
        '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –µ—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /profile.',
        Markup.inlineKeyboard([
          Markup.button.callback('–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', 'profile')
        ])
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
    const plans = await getSubscriptionPlans();
    
    if (!plans || plans.length === 0) {
      return ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–ª–∞–Ω–æ–≤
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:\n\n';
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏
    const buttons = plans.map(plan => {
      message += `*${plan.name}*\n`;
      message += `–¶–µ–Ω–∞: ${plan.price} —Ä—É–±.\n`;
      message += `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${plan.duration_days} –¥–Ω–µ–π\n`;
      message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${plan.description}\n\n`;
      
      return [Markup.button.callback(`${plan.name} - ${plan.price} —Ä—É–±.`, `select_plan:${plan.id}`)];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_subscription')]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞–Ω–∞
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(buttons));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user.currentAction = 'selecting_plan';
    
    logger.info(`User ${ctx.from.id} requested subscription plans`);
  } catch (error) {
    logger.error('Error in subscribe command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handlePlanSelection(ctx) {
  try {
    await ctx.answerCbQuery();
    
    // –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–∑ callback_data
    const planId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
    const plan = await getSubscriptionPlan(planId);
    logger.info('Plan info:', plan);
    
    if (!plan) {
      return ctx.reply('–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å dbId –≤ —Å–µ—Å—Å–∏–∏
    if (!ctx.session.user || !ctx.session.user.dbId) {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userResult = await query(
        'SELECT id FROM users WHERE CAST(telegram_id AS TEXT) = $1',
        [ctx.from.id.toString()]
      );
      
      if (userResult.rows.length === 0) {
        return ctx.reply('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.');
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
      if (!ctx.session.user) ctx.session.user = {};
      ctx.session.user.dbId = userResult.rows[0].id;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏ –ø–ª–∞–Ω
    logger.info('Plan price:', plan.price, 'type:', typeof plan.price);
    const isFree = parseFloat(plan.price) === 0;
    
    if (isFree) {
      try {
        logger.info(`Activating free plan ${planId} for user ${ctx.session.user.dbId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        const subscriptionResult = await query(
          'SELECT * FROM user_subscriptions WHERE user_id = $1',
          [ctx.session.user.dbId]
        );
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
        const paymentId = Date.now().toString();
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ "–ø–ª–∞—Ç–µ–∂–µ" —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "completed"
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
        const paymentResult = await query(
          `INSERT INTO payments 
           (user_id, plan_id, amount, status, payment_id, currency) 
           VALUES ($1, $2, $3, $4, $5, $6)
           RETURNING id`,
          [
            ctx.session.user.dbId, 
            planId, 
            0, 
            'completed', 
            paymentId,
            'RUB'
          ]
        );
        
        const dbPaymentId = paymentResult.rows[0].id;
        
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        if (subscriptionResult.rows.length > 0) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
          const endDate = new Date();
          endDate.setDate(endDate.getDate() + plan.duration_days);
          
          await query(
            `UPDATE user_subscriptions 
             SET plan_id = $1, 
                 payment_id = $2, 
                 end_date = $3, 
                 is_active = true
             WHERE user_id = $4`,
            [planId, dbPaymentId, endDate, ctx.session.user.dbId]
          );
          
          logger.info(`Updated subscription for user ${ctx.from.id} to plan ${planId}`);
        } else {
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API —Ñ—É–Ω–∫—Ü–∏—é
          await activateSubscription(ctx.session.user.dbId, planId, dbPaymentId);
          logger.info(`Created new subscription for user ${ctx.from.id} with plan ${planId}`);
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        await ctx.reply(
          `‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω "${plan.name}" —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
          `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ${plan.duration_days} –¥–Ω–µ–π\n` +
          `–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: ${plan.request_limit}\n\n` +
          `–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: ${plan.models_access.join(', ')}`
        );
        
        logger.info(`Free plan ${planId} activated for user ${ctx.from.id}`);
        return;
      } catch (error) {
        logger.error(`Error activating free plan for user ${ctx.from.id}:`, error);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      }
    }
    
    // –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram
    try {
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
      const invoice = await createTelegramInvoice(ctx.session.user.dbId, planId);
      
      if (!invoice || !invoice.invoice_link) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
      await ctx.reply(
        `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ "${plan.name}" –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n\n` +
        `${invoice.invoice_link}\n\n` +
        '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
        { disable_web_page_preview: true }
      );
      
      logger.info(`Payment invoice created for user ${ctx.from.id}, plan ${planId}`);
    } catch (error) {
      logger.error(`Error creating payment for user ${ctx.from.id}:`, error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  } catch (error) {
    logger.error('Error in plan selection handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleSuccessfulPayment(ctx) {
  try {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    const { planId, endDate, receiptNumber } = await processSuccessfulPayment(ctx);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    const formattedEndDate = new Date(endDate).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    await ctx.reply(
      `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.\n\n` +
      `–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: ${formattedEndDate}\n` +
      `–ù–æ–º–µ—Ä —á–µ–∫–∞: ${receiptNumber}\n\n` +
      `–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /receipt.`
    );
    
    logger.info(`User ${ctx.from.id} successfully paid for plan ${planId}`);
  } catch (error) {
    logger.error('Error in successful payment handler:', error);
    await ctx.reply(
      '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. ' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /support.'
    );
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleCancelSubscription(ctx) {
  try {
    await ctx.answerCbQuery();
    await ctx.reply('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user.currentAction = null;
    
    logger.info(`User ${ctx.from.id} canceled subscription process`);
  } catch (error) {
    logger.error('Error in cancel subscription handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = {
  subscribeCommand,
  handlePlanSelection,
  handleSuccessfulPayment,
  handleCancelSubscription
}; 