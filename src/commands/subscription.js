const { Markup } = require('telegraf');
const { getUserSubscription, cancelSubscription } = require('../services/subscription');
const { getSubscriptionPlans, getSubscriptionPlan, activateSubscription } = require('../services/api');
const { query } = require('../services/database');
const { setupLogger } = require('../utils/logger');

const logger = setupLogger();

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function subscriptionCommand(ctx) {
  try {
    const telegramId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if (!ctx.state.hasActiveSubscription) {
      return ctx.reply(
        '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscribe.',
        Markup.inlineKeyboard([
          Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribe')
        ])
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    const subscription = await getUserSubscription(telegramId);
    
    if (!subscription) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const plan = await getSubscriptionPlan(subscription.plan_id);
    
    if (!plan) {
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    const endDate = subscription.end_date && !isNaN(new Date(subscription.end_date)) 
      ? new Date(subscription.end_date).toLocaleDateString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        })
      : '–ë–µ—Å—Å—Ä–æ—á–Ω–æ';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    let message = `üîπ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:* ${plan.name}\n`;
    message += `üîπ *–û–ø–∏—Å–∞–Ω–∏–µ:* ${plan.description}\n`;
    message += `üîπ *–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:* ${endDate}\n`;
    message += `üîπ *–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:* ${plan.request_limit === -1 ? '–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ' : plan.request_limit}\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    message += '\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:*\n';
    if (plan.models_access && Array.isArray(plan.models_access)) {
      plan.models_access.forEach(model => {
        message += `‚Ä¢ ${model}\n`;
      });
    } else {
      message += '‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'change_subscription')],
      plan.price === 0 ? [] : [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'cancel_subscription')]
    ].filter(row => row.length > 0));
    
    ctx.replyWithMarkdown(message, keyboard);
    
    logger.info(`User ${ctx.from.id} viewed subscription info`);
  } catch (error) {
    logger.error('Error in subscription command:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleChangeSubscription(ctx) {
  try {
    await ctx.answerCbQuery();
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    const plans = await getSubscriptionPlans();
    
    if (!plans || plans.length === 0) {
      return ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–ª–∞–Ω–æ–≤
    let message = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:\n\n';
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏
    const buttons = plans.map(plan => {
      message += `*${plan.name}*\n`;
      message += `–¶–µ–Ω–∞: ${plan.price} —Ä—É–±.\n`;
      message += `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${plan.duration_days} –¥–Ω–µ–π\n`;
      message += `–û–ø–∏—Å–∞–Ω–∏–µ: ${plan.description}\n\n`;
      
      return [Markup.button.callback(`${plan.name} - ${plan.price} —Ä—É–±.`, `select_plan:${plan.id}`)];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_subscription')]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞–Ω–∞
    await ctx.replyWithMarkdown(message, Markup.inlineKeyboard(buttons));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user.currentAction = 'selecting_plan';
    
    logger.info(`User ${ctx.from.id} requested to change subscription`);
  } catch (error) {
    logger.error('Error in change subscription handler:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleCancelPlanSelection(ctx) {
  try {
    await ctx.answerCbQuery();
    await ctx.reply('–í—ã–±–æ—Ä –ø–ª–∞–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω.');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user.currentAction = null;
    
    logger.info(`User ${ctx.from.id} canceled plan selection`);
  } catch (error) {
    logger.error('Error in cancel plan selection handler:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleKeepSubscription(ctx) {
  try {
    await ctx.answerCbQuery();
    await ctx.reply('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π.');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user.currentAction = null;
    
    logger.info(`User ${ctx.from.id} kept subscription`);
  } catch (error) {
    logger.error('Error in keep subscription handler:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = {
  subscriptionCommand,
  handleChangeSubscription,
  handleCancelPlanSelection,
  handleKeepSubscription
}; 