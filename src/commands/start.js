const { Markup } = require('telegraf');
const { setupLogger } = require('../utils/logger');
const { getUserSubscription } = require('../services/subscription');
const { getSubscriptionPlan } = require('../services/api');

const logger = setupLogger();

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function startCommand(ctx) {
  try {
    const { first_name } = ctx.from;
    const telegramId = ctx.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if (ctx.state.hasActiveSubscription) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subscription = await getUserSubscription(telegramId);
      
      if (!subscription) {
        return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const plan = await getSubscriptionPlan(subscription.plan_id);
      
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
      let message = `–ü—Ä–∏–≤–µ—Ç, ${first_name}! üëã\n\n`;
      message += `–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω: *${plan ? plan.name : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π'}*\n`;
      
      if (subscription.end_date && !isNaN(new Date(subscription.end_date))) {
        const daysLeft = Math.ceil((new Date(subscription.end_date) - new Date()) / (1000 * 60 * 60 * 24));
        message += `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 0 ? daysLeft : 0}\n\n`;
      }
      
      message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:';
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
      const keyboard = Markup.keyboard([
        ['üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
      ]).resize();
      
      ctx.replyWithMarkdown(message, keyboard);
    } else {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      let message = `–ü—Ä–∏–≤–µ—Ç, ${first_name}! üëã\n\n`;
      message += '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscribe.\n\n';
      message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:';
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
      const keyboard = Markup.keyboard([
        ['üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'],
        ['‚ÑπÔ∏è –ü–æ–º–æ—â—å', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
      ]).resize();
      
      ctx.replyWithMarkdown(message, keyboard);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
      setTimeout(async () => {
        await ctx.reply(
          '–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?',
          Markup.inlineKeyboard([
            Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 'subscribe'),
            Markup.button.callback('–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ', 'more_info')
          ])
        );
      }, 1000);
    }
    
    logger.info(`User ${ctx.from.id} started the bot`);
  } catch (error) {
    logger.error('Error in start command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = {
  startCommand
}; 