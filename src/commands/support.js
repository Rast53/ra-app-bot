const { Markup } = require('telegraf');
const { setupLogger } = require('../utils/logger');
const { query } = require('../services/database');

const logger = setupLogger();

// ID –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É)
const SUPPORT_CHAT_ID = process.env.SUPPORT_CHAT_ID;

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {string} –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
function escapeMarkdown(text) {
  if (!text) return '';
  return text.replace(/([_*[\]()~`>#+=|{}.!-])/g, '\\$1');
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function supportCommand(ctx) {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    const message = `
–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:

*Email:* ${process.env.SUPPORT_EMAIL || 'support@example.com'}
*–¢–µ–ª–µ—Ñ–æ–Ω:* ${process.env.SUPPORT_PHONE || '+7 (XXX) XXX-XX-XX'}

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    const keyboard = Markup.inlineKeyboard([
      Markup.button.callback('–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'write_support_message')
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await ctx.replyWithMarkdown(message, keyboard);
    
    logger.info(`User ${ctx.from.id} requested support info`);
  } catch (error) {
    logger.error('Error in support command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleWriteSupportMessage(ctx) {
  try {
    await ctx.answerCbQuery();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ' +
      '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.',
      Markup.forceReply()
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user.currentAction = 'writing_support_message';
    
    logger.info(`User ${ctx.from.id} started writing support message`);
  } catch (error) {
    logger.error('Error in write support message handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleSupportMessage(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    if (ctx.session.user.currentAction !== 'writing_support_message') {
      return;
    }
    
    const message = ctx.message.text;
    const { id, username, first_name, last_name } = ctx.from;
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const escapedFirstName = escapeMarkdown(first_name);
    const escapedLastName = escapeMarkdown(last_name || '');
    const escapedUsername = username ? '@' + escapeMarkdown(username) : '–±–µ–∑ –∏–º–µ–Ω–∏';
    const escapedMessage = escapeMarkdown(message);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportMessage = `
üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*

*–û—Ç:* ${escapedFirstName} ${escapedLastName} (${escapedUsername})
*ID:* ${id}
*–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}

*–°–æ–æ–±—â–µ–Ω–∏–µ:*
${escapedMessage}
`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    try {
      const sentMessage = await ctx.telegram.sendMessage(
        SUPPORT_CHAT_ID, 
        supportMessage, 
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_to_user:${id}` }]
            ]
          }
        }
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await saveSupportDialog(id, message, sentMessage.message_id);
      
      logger.info(`Support message from user ${id} sent to support chat`);
    } catch (error) {
      logger.error(`Error sending message to support chat:`, error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –º–∏–≥—Ä–∞—Ü–∏–µ–π —á–∞—Ç–∞
      if (error.response && error.response.parameters && error.response.parameters.migrate_to_chat_id) {
        const newChatId = error.response.parameters.migrate_to_chat_id;
        logger.info(`Support chat migrated to new ID: ${newChatId}. Please update SUPPORT_CHAT_ID in the code.`);
        
        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π —á–∞—Ç
        try {
          const sentMessage = await ctx.telegram.sendMessage(
            newChatId, 
            supportMessage, 
            { 
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_to_user:${id}` }]
                ]
              }
            }
          );
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          await saveSupportDialog(id, message, sentMessage.message_id);
          
          logger.info(`Support message from user ${id} sent to new support chat ID: ${newChatId}`);
          return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        } catch (newError) {
          logger.error(`Error sending message to new support chat:`, newError);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await saveSupportMessage(id, message);
      
      logger.info(`Support message from user ${id} saved to database only`);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.reply(
      '–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    );
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.user.currentAction = null;
    
    logger.info(`User ${ctx.from.id} sent support message`);
  } catch (error) {
    logger.error('Error in support message handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–ª–æ–≥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} supportMessageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 */
async function saveSupportDialog(userId, message, supportMessageId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userResult = await query(
      'SELECT id FROM users WHERE CAST(telegram_id AS TEXT) = $1',
      [String(userId)]
    );
    
    if (userResult.rows.length === 0) {
      logger.error(`User with telegram_id ${userId} not found in database`);
      return;
    }
    
    const dbUserId = userResult.rows[0].id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ support_dialogs
    const tableResult = await query(
      `SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'support_dialogs'
      )`
    );
    
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
    if (!tableResult.rows[0].exists) {
      await query(`
        CREATE TABLE support_dialogs (
          id SERIAL PRIMARY KEY,
          user_id INTEGER NOT NULL,
          telegram_id BIGINT NOT NULL,
          message TEXT NOT NULL,
          support_message_id BIGINT,
          is_from_user BOOLEAN NOT NULL DEFAULT TRUE,
          created_at TIMESTAMP NOT NULL DEFAULT NOW(),
          FOREIGN KEY (user_id) REFERENCES users(id)
        )
      `);
      logger.info('Created support_dialogs table');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await query(
      `INSERT INTO support_dialogs 
       (user_id, telegram_id, message, support_message_id, is_from_user, created_at) 
       VALUES ($1, $2, $3, $4, TRUE, NOW())`,
      [dbUserId, userId, message, supportMessageId]
    );
    
    logger.info(`Support dialog for user ${userId} saved to database`);
  } catch (error) {
    logger.error('Error saving support dialog to database:', error);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏)
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function saveSupportMessage(userId, message) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userResult = await query(
      'SELECT id FROM users WHERE CAST(telegram_id AS TEXT) = $1',
      [String(userId)]
    );
    
    if (userResult.rows.length === 0) {
      logger.error(`User with telegram_id ${userId} not found in database`);
      return;
    }
    
    const dbUserId = userResult.rows[0].id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ support_messages
    const tableResult = await query(
      `SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'support_messages'
      )`
    );
    
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
    if (!tableResult.rows[0].exists) {
      await query(`
        CREATE TABLE support_messages (
          id SERIAL PRIMARY KEY,
          user_id INTEGER NOT NULL,
          telegram_id BIGINT NOT NULL,
          message TEXT NOT NULL,
          created_at TIMESTAMP NOT NULL DEFAULT NOW(),
          is_read BOOLEAN NOT NULL DEFAULT FALSE,
          is_answered BOOLEAN NOT NULL DEFAULT FALSE,
          answer TEXT,
          answered_at TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users(id)
        )
      `);
      logger.info('Created support_messages table');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await query(
      `INSERT INTO support_messages 
       (user_id, telegram_id, message, created_at) 
       VALUES ($1, $2, $3, NOW())`,
      [dbUserId, userId, message]
    );
    
    logger.info(`Support message from user ${userId} saved to database`);
  } catch (error) {
    logger.error('Error saving support message to database:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleReplyToUserStart(ctx) {
  try {
    await ctx.answerCbQuery();
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
    const userId = parseInt(ctx.callbackQuery.data.split(':')[1]);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const originalMessage = ctx.callbackQuery.message;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º Reply
    await ctx.telegram.sendMessage(
      ctx.chat.id,
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId}. ` +
      '–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–ø—Ä—è–º—É—é.',
      { 
        reply_to_message_id: originalMessage.message_id,
        reply_markup: { force_reply: true }
      }
    );
    
    logger.info(`Support started replying to user ${userId} using force reply`);
  } catch (error) {
    logger.error('Error in reply to user start handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleSupportReply(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (ctx.chat.id !== SUPPORT_CHAT_ID) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!ctx.message.reply_to_message) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    if (!ctx.message.reply_to_message.from || ctx.message.reply_to_message.from.id !== ctx.botInfo.id) {
      return;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const originalText = ctx.message.reply_to_message.text || '';
    
    logger.info(`Trying to extract user ID from message: "${originalText}"`);
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID
    let userIdMatch = originalText.match(/\*ID:\*\s*(\d+)/);
    if (!userIdMatch || !userIdMatch[1]) {
      userIdMatch = originalText.match(/ID:\s*(\d+)/);
    }
    if (!userIdMatch || !userIdMatch[1]) {
      userIdMatch = originalText.match(/–û—Ç:.+ID:\s*(\d+)/);
    }
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–µ
    if (!userIdMatch || !userIdMatch[1]) {
      const idMatches = originalText.match(/\d{9,10}/g);
      if (idMatches && idMatches.length > 0) {
        userIdMatch = [null, idMatches[0]];
      }
    }
    
    if (!userIdMatch || !userIdMatch[1]) {
      logger.error(`Could not extract user ID from message: ${originalText}`);
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    
    const userId = parseInt(userIdMatch[1]);
    const reply = ctx.message.text;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let originalUserMessage = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if (originalText.includes('üì© *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É*') || 
        originalText.includes('üì© *–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞*')) {
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageMatch1 = originalText.match(/\*–°–æ–æ–±—â–µ–Ω–∏–µ:\*\s*\n([\s\S]+)$/);
      const messageMatch2 = originalText.match(/\*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\*\s*\n([\s\S]+)$/);
      
      if (messageMatch1 && messageMatch1[1]) {
        originalUserMessage = messageMatch1[1].trim();
      } else if (messageMatch2 && messageMatch2[1]) {
        originalUserMessage = messageMatch2[1].trim();
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —à–∞–±–ª–æ–Ω–∞–º, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const lines = originalText.split('\n');
        let messageLines = [];
        let foundLastHeader = false;
        
        for (let i = lines.length - 1; i >= 0; i--) {
          if (!foundLastHeader && lines[i].trim() === '') continue;
          
          if (!foundLastHeader && lines[i].includes('*') && !messageLines.length) {
            foundLastHeader = true;
            continue;
          }
          
          if (foundLastHeader) {
            messageLines.unshift(lines[i]);
          }
        }
        
        if (messageLines.length > 0) {
          originalUserMessage = messageLines.join('\n').trim();
        }
      }
    } else {
      // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      try {
        const userDialogs = await query(
          `SELECT message FROM support_dialogs 
           WHERE telegram_id = $1 AND is_from_user = true 
           ORDER BY created_at DESC LIMIT 1`,
          [userId]
        );
        
        if (userDialogs.rows.length > 0) {
          originalUserMessage = userDialogs.rows[0].message;
        }
      } catch (dbError) {
        logger.error(`Error fetching user message from database: ${dbError}`);
      }
    }
    
    logger.info(`Extracted user ID: ${userId}, original message: "${originalUserMessage}", sending reply: "${reply}"`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      let replyMessage = '*–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\n';
      
      // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ü–∏—Ç–∞—Ç—É
      if (originalUserMessage) {
        replyMessage += `*–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n> ${escapeMarkdown(originalUserMessage)}\n\n`;
      } else {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try {
          const userDialogs = await query(
            `SELECT message FROM support_dialogs 
             WHERE telegram_id = $1 AND is_from_user = true 
             ORDER BY created_at DESC LIMIT 1`,
            [userId]
          );
          
          if (userDialogs.rows.length > 0) {
            replyMessage += `*–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:*\n> ${escapeMarkdown(userDialogs.rows[0].message)}\n\n`;
          }
        } catch (dbError) {
          logger.error(`Error fetching user message from database: ${dbError}`);
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      replyMessage += `*–û—Ç–≤–µ—Ç:*\n${escapeMarkdown(reply)}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
      const keyboard = Markup.inlineKeyboard([
        Markup.button.callback('–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', 'write_support_message')
      ]);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      const sentMessage = await ctx.telegram.sendMessage(
        userId,
        replyMessage,
        { 
          parse_mode: 'Markdown',
          reply_markup: keyboard.reply_markup
        }
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await saveSupportReply(userId, reply, ctx.message.message_id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      await ctx.reply(
        `‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId}.`,
        { reply_to_message_id: ctx.message.message_id }
      );
      
      logger.info(`Support reply sent to user ${userId}, message_id: ${sentMessage.message_id}`);
    } catch (error) {
      logger.error(`Error sending reply to user ${userId}:`, error);
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId}. ` +
        '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π ID.',
        { reply_to_message_id: ctx.message.message_id }
      );
    }
  } catch (error) {
    logger.error('Error in support reply handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @param {string} reply - –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 * @param {number} supportMessageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 */
async function saveSupportReply(userId, reply, supportMessageId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const userResult = await query(
      'SELECT id FROM users WHERE CAST(telegram_id AS TEXT) = $1',
      [String(userId)]
    );
    
    if (userResult.rows.length === 0) {
      logger.error(`User with telegram_id ${userId} not found in database`);
      return;
    }
    
    const dbUserId = userResult.rows[0].id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ support_dialogs
    const tableResult = await query(
      `SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'support_dialogs'
      )`
    );
    
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω–µ–π
    if (tableResult.rows[0].exists) {
      await query(
        `INSERT INTO support_dialogs 
         (user_id, telegram_id, message, support_message_id, is_from_user, created_at) 
         VALUES ($1, $2, $3, $4, FALSE, NOW())`,
        [dbUserId, userId, reply, supportMessageId]
      );
      
      logger.info(`Support reply to user ${userId} saved to support_dialogs`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ support_messages
    const messagesTableResult = await query(
      `SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'support_messages'
      )`
    );
    
    // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (messagesTableResult.rows[0].exists) {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const unreadMessagesResult = await query(
        `SELECT id FROM support_messages
         WHERE telegram_id = $1
         AND is_answered = false
         ORDER BY created_at DESC`,
        [userId]
      );
      
      if (unreadMessagesResult.rows.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query(
          `UPDATE support_messages
           SET is_read = true,
               is_answered = true,
               answer = $1,
               answered_at = NOW()
           WHERE id = $2`,
          [reply, unreadMessagesResult.rows[0].id]
        );
        
        logger.info(`Support reply to user ${userId} updated in support_messages for message ID ${unreadMessagesResult.rows[0].id}`);
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ support_dialogs
        const lastMessageResult = await query(
          `SELECT message FROM support_dialogs
           WHERE telegram_id = $1
           AND is_from_user = true
           ORDER BY created_at DESC
           LIMIT 1`,
          [userId]
        );
        
        let lastMessage = '';
        if (lastMessageResult.rows.length > 0) {
          lastMessage = lastMessageResult.rows[0].message;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ support_messages
        await query(
          `INSERT INTO support_messages
           (user_id, telegram_id, message, created_at, is_read, is_answered, answer, answered_at)
           VALUES ($1, $2, $3, NOW() - INTERVAL '1 minute', true, true, $4, NOW())`,
          [dbUserId, userId, lastMessage, reply]
        );
        
        logger.info(`New support message and reply created for user ${userId} in support_messages`);
      }
    }
  } catch (error) {
    logger.error('Error saving support reply to database:', error);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleContinueSupportDialog(ctx) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
    if (!ctx.message.reply_to_message || !ctx.message.reply_to_message.from || ctx.message.reply_to_message.from.id !== ctx.botInfo.id) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const originalText = ctx.message.reply_to_message.text || '';
    if (!originalText.startsWith('*–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*')) {
      return false;
    }
    
    const message = ctx.message.text;
    const { id, username, first_name, last_name } = ctx.from;
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const escapedFirstName = escapeMarkdown(first_name);
    const escapedLastName = escapeMarkdown(last_name || '');
    const escapedUsername = username ? '@' + escapeMarkdown(username) : '–±–µ–∑ –∏–º–µ–Ω–∏';
    const escapedMessage = escapeMarkdown(message);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    let supportReply = '';
    let userOriginalMessage = '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessageMatch = originalText.match(/\*–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\*\s*\n>\s*([\s\S]+?)\n\n/);
    if (userMessageMatch && userMessageMatch[1]) {
      userOriginalMessage = userMessageMatch[1].trim();
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const supportReplyMatch = originalText.match(/\*–û—Ç–≤–µ—Ç:\*\s*\n([\s\S]+)$/);
    if (supportReplyMatch && supportReplyMatch[1]) {
      supportReply = supportReplyMatch[1].trim();
    } else {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π
      if (originalText.includes('> ')) {
        const parts = originalText.split('\n\n');
        if (parts.length > 2) {
          supportReply = parts[parts.length - 1].trim();
        }
      } else {
        // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const replyMatch = originalText.match(/\*–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\*\s*\n\n([\s\S]+)$/);
        if (replyMatch && replyMatch[1]) {
          supportReply = replyMatch[1].trim();
        }
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    let supportMessage = `
üì© *–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞*

*–û—Ç:* ${escapedFirstName} ${escapedLastName} (${escapedUsername})
*ID:* ${id}
*–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (userOriginalMessage) {
      supportMessage += `
*–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*
${userOriginalMessage}
`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    supportMessage += `
*–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*
${supportReply ? supportReply : '(–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å)'}

*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*
${escapedMessage}
`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–≤–µ—Ç–∞
    try {
      const sentMessage = await ctx.telegram.sendMessage(
        SUPPORT_CHAT_ID, 
        supportMessage, 
        { 
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `reply_to_user:${id}` }]
            ]
          }
        }
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏–∞–ª–æ–≥–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await saveSupportDialog(id, message, sentMessage.message_id);
      
      logger.info(`Continued support dialog from user ${id} sent to support chat`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply('–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      
      return true;
    } catch (error) {
      logger.error(`Error sending continued dialog to support chat:`, error);
      return false;
    }
  } catch (error) {
    logger.error('Error in continue support dialog handler:', error);
    return false;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
 * @param {Object} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç Telegram
 */
async function handleAdminReply(ctx) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º
    const userId = ctx.session.support.replyToUserId;
    const reply = ctx.message.text;
    
    if (!userId) {
      ctx.session.support.currentAction = null;
      return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.');
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      await ctx.telegram.sendMessage(
        userId,
        `*–û—Ç–≤–µ—Ç –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n\n${escapeMarkdown(reply)}`,
        { parse_mode: 'Markdown' }
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await saveSupportReply(userId, reply, ctx.message.message_id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await ctx.reply(`‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId}.`);
      
      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.support.currentAction = null;
      ctx.session.support.replyToUserId = null;
      
      logger.info(`Admin ${ctx.from.id} replied to user ${userId}`);
    } catch (error) {
      logger.error(`Error sending reply to user ${userId}:`, error);
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await saveSupportReply(userId, reply, ctx.message.message_id);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await ctx.reply(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${userId}. ` +
        '–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. ' +
        '–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.'
      );
      
      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.support.currentAction = null;
      ctx.session.support.replyToUserId = null;
    }
  } catch (error) {
    logger.error('Error in admin reply handler:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    if (ctx.session.support) {
      ctx.session.support.currentAction = null;
      ctx.session.support.replyToUserId = null;
    }
  }
}

module.exports = {
  supportCommand,
  handleWriteSupportMessage,
  handleSupportMessage,
  handleReplyToUserStart,
  handleSupportReply,
  handleContinueSupportDialog,
  handleAdminReply,
  SUPPORT_CHAT_ID
}; 